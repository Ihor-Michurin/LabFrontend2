@page
@model LabFrontend.Pages.AirQualityModel

@{
    ViewData["Title"] = "Air Quality";
}

<h1>Air Quality</h1>

<form method="get">
    <div class="form-group">
        <label for="receptionPointId">Select Reception Point:</label>
        <select id="receptionPointId" name="receptionPointId" class="form-control" onchange="this.form.submit()">
            <option value="">All</option>
            @foreach (var receptionPoint in Model.ReceptionPoints)
            {
                <option value="@receptionPoint.Id" selected="@(Model.Measurements != null && Model.Measurements.Count > 0 && Model.Measurements[0].ReceptionPointId == receptionPoint.Id)">@receptionPoint.Name</option>
            }
        </select>
    </div>
</form>

@if (Model.Measurements != null && Model.Measurements.Count > 0)
{
    <h3>Measurements:</h3>

    <div class="container">
        <div class="row">
            <div class="col-sm-6">
                <canvas id="temperatureChart" width="400" height="200"></canvas>
            </div>
            <div class="col-sm-6">
                <canvas id="pressureChart" width="400" height="200"></canvas>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <canvas id="humidityChart" width="400" height="200"></canvas>
            </div>
            <div class="col-sm-6">
                <canvas id="iaqChart" width="400" height="200"></canvas>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <canvas id="co2Chart" width="400" height="200"></canvas>
            </div>
            <div class="col-sm-6">
                <canvas id="breathVocChart" width="400" height="200"></canvas>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Temperature Chart
        const temperatureLabels = @Html.Raw(Json.Serialize(Model.Measurements.Select(m => m.Date.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss"))));
        const temperatureData = @Html.Raw(Json.Serialize(Model.Measurements.Select(m => m.Temperature)));


        const temperatureChartCtx = document.getElementById('temperatureChart').getContext('2d');
        const temperatureChart = new Chart(temperatureChartCtx, {
            type: 'bar',
            data: {
                labels: temperatureLabels,
                datasets: [
                    {
                        label: 'Temperature',
                        data: temperatureData,
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 1
                    }
                ]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: false // Exclude zero as the lowest value
                    }
                }
            }
        });

        // Pressure Chart
        const pressureLabels = @Html.Raw(Json.Serialize(Model.Measurements.Select(m => m.Date.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss"))));
        const pressureData = @Html.Raw(Json.Serialize(Model.Measurements.Select(m => m.Pressure)));

        const pressureChartCtx = document.getElementById('pressureChart').getContext('2d');
        const pressureChart = new Chart(pressureChartCtx, {
            type: 'bar',
            data: {
                labels: pressureLabels,
                datasets: [
                    {
                        label: 'Pressure',
                        data: pressureData,
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }
                ]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: false // Exclude zero as the lowest value
                    }
                }
            }
        });

        // Humidity Chart
        const humidityLabels = @Html.Raw(Json.Serialize(Model.Measurements.Select(m => m.Date.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss"))));
        const humidityData = @Html.Raw(Json.Serialize(Model.Measurements.Select(m => m.Humidity)));

        const humidityChartCtx = document.getElementById('humidityChart').getContext('2d');
        const humidityChart = new Chart(humidityChartCtx, {
            type: 'bar',
            data: {
                labels: humidityLabels,
                datasets: [
                    {
                        label: 'Humidity',
                        data: humidityData,
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    }
                ]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: false // Exclude zero as the lowest value
                    }
                }
            }
        });

        // IAQ Chart
        const iaqLabels = @Html.Raw(Json.Serialize(Model.Measurements.Select(m => m.Date.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss"))));
        const iaqData = @Html.Raw(Json.Serialize(Model.Measurements.Select(m => m.Iaq)));

        const iaqChartCtx = document.getElementById('iaqChart').getContext('2d');
        const iaqChart = new Chart(iaqChartCtx, {
            type: 'bar',
            data: {
                labels: iaqLabels,
                datasets: [
                    {
                        label: 'IAQ',
                        data: iaqData,
                        backgroundColor: 'rgba(255, 205, 86, 0.2)',
                        borderColor: 'rgba(255, 205, 86, 1)',
                        borderWidth: 1
                    }
                ]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: false // Exclude zero as the lowest value
                    }
                }
            }
        });

        // CO2 Equivalent Chart
        const co2Labels = @Html.Raw(Json.Serialize(Model.Measurements.Select(m => m.Date.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss"))));
        const co2Data = @Html.Raw(Json.Serialize(Model.Measurements.Select(m => m.Co2Equivalent)));

        const co2ChartCtx = document.getElementById('co2Chart').getContext('2d');
        const co2Chart = new Chart(co2ChartCtx, {
            type: 'bar',
            data: {
                labels: co2Labels,
                datasets: [
                    {
                        label: 'CO2 Equivalent',
                        data: co2Data,
                        backgroundColor: 'rgba(153, 102, 255, 0.2)',
                        borderColor: 'rgba(153, 102, 255, 1)',
                        borderWidth: 1
                    }
                ]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: false // Exclude zero as the lowest value
                    }
                }
            }
        });

        // Breath VOC Equivalent Chart
        const breathVocLabels = @Html.Raw(Json.Serialize(Model.Measurements.Select(m => m.Date.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss"))));
        const breathVocData = @Html.Raw(Json.Serialize(Model.Measurements.Select(m => m.BreathVocEquivalent)));

        const breathVocChartCtx = document.getElementById('breathVocChart').getContext('2d');
        const breathVocChart = new Chart(breathVocChartCtx, {
            type: 'bar',
            data: {
                labels: breathVocLabels,
                datasets: [
                    {
                        label: 'Breath VOC Equivalent',
                        data: breathVocData,
                        backgroundColor: 'rgba(255, 159, 64, 0.2)',
                        borderColor: 'rgba(255, 159, 64, 1)',
                        borderWidth: 1
                    }
                ]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: false // Exclude zero as the lowest value
                    }
                }
            }
        });
    </script>
}
else
{
    <p>No measurements available.</p>
}

